package com.xdsoft.mvc.controller;

import java.io.IOException;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.xdsoft.mvc.service.UserService;
import com.xdsoft.mvc.service.exception.UserExsitsException;
import com.xdsoft.web.framework.annotation.PublicPage;
import com.xdsoft.web.framework.annotation.SinglePage;
import com.xdsoft.web.session.SessionUtils;

@Controller
@RequestMapping(value = "/")
public class DashBoard {
	@Resource
	private UserService userService;

	@PublicPage
	@RequestMapping
	public String home(HttpServletRequest request) {

		return "home";
	}

	/**
	 * 登录入口
	 * 
	 * @return
	 */

	@SinglePage
	@PublicPage
	@RequestMapping(value = { "/login", "/signin" })
	public String signin() {
		return "login";
	}

	/***
	 * 登录入口
	 * @param unique ：用户名或邮箱
	 * @return
	 */
	@SinglePage
	@PublicPage
	@RequestMapping(value = { "/login", "/signin" }, method = RequestMethod.POST)
	public String login(@RequestParam String unique, @RequestParam String password, HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> user = userService.verify(unique, password);
		if (user != null) {
			HttpSession session = request.getSession(true);
			SessionUtils.setAttribute(session, user);
			try {
				response.sendRedirect(request.getContextPath());
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
		} else {
			String message = "用户名或密码不正确！";
			request.setAttribute("message", message);
			return "login";
		}
	}

	/**
	 * 注册入口
	 * 
	 * @return
	 */
	@PublicPage
	@SinglePage
	@RequestMapping(value = { "/signup", "/register", "/join" })
	public String signup() {
		return "signup";
	}

	/**
	 * 处理注册
	 * 
	 * @param username
	 * @param password
	 * @param invite
	 * @param request
	 * @param response
	 * @return
	 */
	@PublicPage
	@SinglePage
	@RequestMapping(value = { "/signup", "/register", "/join" }, method = RequestMethod.POST)
	public String register(@RequestParam String email, @RequestParam String username, @RequestParam String password,
			HttpServletRequest request, HttpServletResponse response) {

		try {
			Map<String, Object> user = userService.register(email, username, password);// 注册用户

			if (user != null) {
				login(email, password, request, response);
				return null;
			} 
		} catch (UserExsitsException e) {
			request.setAttribute("message", "用户名或邮箱已存在。");
		}

		return "signup";
	}

	/**
	 * 登出
	 * 
	 * @param token
	 * @param secret
	 * @param request
	 * @param response
	 */
	@SinglePage
	@PublicPage
	@RequestMapping(value = { "/signout", "/logout" })
	public void signout(@CookieValue(required = false) String token, @CookieValue(required = false) String secret,
			HttpServletRequest request, HttpServletResponse response) {
		SessionUtils.removeAttribute(request.getSession());
		removeTokenCookie(response);
		try {
			response.sendRedirect(request.getContextPath());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * @param response
	 */
	private void removeTokenCookie(HttpServletResponse response) {
		Cookie tokenCookie = new Cookie("token", null);
		tokenCookie.setMaxAge(0);
		response.addCookie(tokenCookie);
		Cookie secretCookie = new Cookie("secret", null);
		secretCookie.setMaxAge(0);
		response.addCookie(secretCookie);
	}

}
