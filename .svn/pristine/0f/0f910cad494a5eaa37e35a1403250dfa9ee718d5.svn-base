package com.xdsoft.mvc.controller;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FileUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.xdsoft.mvc.service.RobOrderService;
import com.xdsoft.mvc.service.UserService;
import com.xdsoft.mvc.util.AuthUtils;
import com.xdsoft.web.framework.annotation.PublicPage;

@Controller
@RequestMapping(value = { "/user", "/users" })
public class UserController {
	@Resource
	private UserService userService;
	@Resource
	private AuthUtils authUtils;
	@Resource
	private RobOrderService robOrderService;

	/**
	 * 用户个人主页
	 * 
	 * @author REYENXU
	 * @param id
	 * @param request
	 * @return
	 */
	@PublicPage
	@RequestMapping(value = "/{id:\\w+}")
	public String view(@PathVariable String id, HttpServletRequest request) {
		Map<String, Object> user = authUtils.getLoginUser(request, null, null);// 获取当前用户信息
		if (user != null) {
			int user_id = (Integer) user.get("id");
			Map<String, Object> ue = userService.queryExtendByUserid(user_id); // 获取用户扩展信息

			user.put("address", ue.get("address"));
			user.put("signature", ue.get("signature"));
			user.put("hobby", ue.get("hobby"));
			user.put("qq", ue.get("qq"));
			user.put("tel", ue.get("tel"));
			user.put("sex", ue.get("sex"));
			user.put("grade", ue.get("grade"));

			UserService.fixUser(user);
			request.setAttribute("user", user);

		}
		return "user/view";
	}

	/**
	 * 修改个人基本信息
	 */
	@PublicPage
	@RequestMapping(value = "/modifyInfo")
	public String modifyUserInfo(@RequestParam String nickname, @RequestParam String address,
			@RequestParam String hobby, @RequestParam String signature, @RequestParam String qq, @RequestParam String tel, @RequestParam String sex, HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> user = authUtils.getLoginUser(request, null, null);// 获取当前用户信息
		if (user != null) {
			user.put("user_id", user.get("id"));
			user.put("signature", signature);
			user.put("nickname", nickname);
			user.put("hobby", hobby);
			user.put("address", address);
			user.put("qq", qq);
			user.put("tel", tel);
			user.put("sex", sex);
			
			userService.updateUseExtend(user);
			UserService.fixUser(user);

			request.setAttribute("user", user);
		}
		return "user/view";
	}
	
	/**
	 * 修改头像
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public String update(@RequestParam(required = false) MultipartFile attachment, HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> user = authUtils.getLoginUser(request, null, null);
		String photosaddress = "avatars";

		String fileName = upload(attachment, photosaddress, request);
		if (fileName.equals("overflow")) {
			request.setAttribute("message", "只允许上传1M以内的图片");
			return null;
		} else {
			user.put("avatar", fileName);
			userService.updateAvatar(user);
			if (user != null) {
				Map<String, Object> ue = userService.queryExtendByUserid((Integer) user.get("id"));

				user.put("address", ue.get("address"));
				user.put("signature", ue.get("signature"));
				user.put("hobby", ue.get("hobby"));
				user.put("qq", ue.get("qq"));
				user.put("tel", ue.get("tel"));
				user.put("sex", ue.get("sex"));
				user.put("grade", ue.get("grade"));

				UserService.fixUser(user);
				request.setAttribute("user", user);
				try {
					response.sendRedirect(request.getContextPath() + "/user/" + user.get("unique"));
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			return "user/view";
		}

	}

	/**
	 * 图片的保存
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/upload", method = RequestMethod.POST)
	public @ResponseBody String upload(@RequestParam MultipartFile attachment, String photosaddress,
			HttpServletRequest request) {

		if (attachment != null && !attachment.isEmpty()) {
			// TODO 处理附件大小问题
			if (attachment.getSize() > 1 * 1024 * 1024) {
				return "overflow";
			}
			String separator = File.separator;
			String fileName = UUID.randomUUID().toString().replaceAll("-", "");

			String realPath = request.getSession().getServletContext().getRealPath(separator + photosaddress);
			String foo = attachment.getOriginalFilename();
			String[] bar = foo.split("[.]");
			File newFile = new File(realPath, fileName + "." + bar[bar.length - 1]);

			try {
				FileUtils.copyInputStreamToFile(attachment.getInputStream(), newFile);
				return newFile.getName();
			} catch (IOException e) {
				return null;
			}
		}
		return null;
	}

}