package com.xdsoft.mvc.controller;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.xdsoft.auth.AuthInterceptor;
import com.xdsoft.mvc.service.ManagerService;
import com.xdsoft.mvc.service.OrdersService;
import com.xdsoft.mvc.service.UserService;
import com.xdsoft.mvc.util.AuthUtils;
import com.xdsoft.web.framework.annotation.Auth;
import com.xdsoft.web.framework.annotation.PublicPage;
import com.xdsoft.web.framework.annotation.SinglePage;
import com.xdsoft.web.session.SessionUtils;

/**
 * 后台管理
 * 
 * @author reyenxu
 * */
@Controller
@RequestMapping(value = "/manager")
public class ManagerController {

	@Resource
	private ManagerService managerService;
	@Resource
	private OrdersService ordersService;
	@Resource
	private AuthUtils authUtils;
	@Resource
	private UserService userService;

	/**
	 * 后台欢迎页
	 * */
	@Auth("1/2/3")
	@SinglePage
	@RequestMapping(value = "/welcome")
	public String welcome(HttpServletRequest request) {

		return "manager/welcome";
	}

	/**
	 * 后台管理登陆入口
	 * */
	@SinglePage
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String managerLogin(HttpServletRequest request) {

		return "manager/login";
	}

	/**
	 * 处理登录请求
	 * */
	@SinglePage
	@RequestMapping(value = "/index", method = RequestMethod.POST)
	public String loginProcess(@RequestParam String unique,
			@RequestParam String password, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) {
		Map<String, Object> user = managerService.verifylogin(unique, password);
		if (user != null) {
			SessionUtils.setAttribute(session, user);
			session.setAttribute(AuthInterceptor.SESSION_AUTHS,
					user.get("author"));
			System.out.print(authUtils.getLoginUser(request, null, null));
			return "/manager/manager";
		} else {
			String message = "用户名或密码不正确或您不是后台人员!";
			request.setAttribute("message", message);
			return "/manager/login";
		}

	}

	/**
	 * 后台管理主页面入口
	 * */
	@Auth("1/2/3")
	@SinglePage
	@PublicPage
	@RequestMapping(value = { "manager", "index" })
	public String manager(HttpServletRequest request,
			HttpServletResponse response) {

		return "/manager/manager";
	}

	/**
	 * 登出
	 * 
	 * @param token
	 * @param secret
	 * @param request
	 * @param response
	 */
	@Auth
	@SinglePage
	@PublicPage
	@RequestMapping(value = "logout")
	public String signout(@CookieValue(required = false) String token,
			@CookieValue(required = false) String secret,
			HttpServletRequest request, HttpServletResponse response) {
		SessionUtils.removeAttribute(request.getSession());
		removeTokenCookie(response);
		return "/manager/login";
	}

	/**
	 * @param response
	 */
	private void removeTokenCookie(HttpServletResponse response) {
		Cookie tokenCookie = new Cookie("token", null);
		tokenCookie.setMaxAge(0);
		response.addCookie(tokenCookie);
		Cookie secretCookie = new Cookie("secret", null);
		secretCookie.setMaxAge(0);
		response.addCookie(secretCookie);
	}

	/**
	 * 用户搜素入口
	 * */
	@Auth("1/2/3")
	@SinglePage
	@PublicPage
	@RequestMapping(value = "/searchuser")
	public String userSearch(HttpServletRequest request,
			HttpServletResponse response) {
		return "/manager/search";
	}

	/**
	 * 用户搜所处理
	 * */
	@Auth("1/2/3")
	@SinglePage
	@PublicPage
	@RequestMapping(value = "/searchuser", method = RequestMethod.POST)
	public String userSearch(@RequestParam String content,
			HttpServletRequest request, HttpServletResponse response) {
		List<Map<String, Object>> userlist = managerService.searchUser(content);
		if (userlist.size() > 0) {
			request.setAttribute("userlist", userlist);
		}
		return "/manager/search";
	}

	/**
	 * 添加管理员入口
	 * */
	@Auth("1")
	@SinglePage
	@PublicPage
	@RequestMapping(value = "/addadmin", method = RequestMethod.GET)
	public String addAdmin(HttpServletRequest request,
			HttpServletResponse response) {
		return "/manager/addAdmin";
	}

	/**
	 * 添加管理员
	 * */
	@Auth("1")
	@SinglePage
	@PublicPage
	@RequestMapping(value = "/addadmin", method = RequestMethod.POST)
	public String addAdmin(@RequestParam String unique,
			@RequestParam String author, HttpServletRequest request,
			HttpServletResponse response) {
		if (managerService.addAdmin(unique, author) > 0) {
			request.setAttribute("message", "添加管理员成功");
		} else {
			request.setAttribute("message", "添加管理员失败,可能该用户信息不存在");
		}

		return "/manager/addAdmin";
	}

	/**
	 * 所有订单详情页,入口
	 * */
	@SinglePage
	@PublicPage
	@RequestMapping(value = "/allOrderDetail")
	public String AllOrderDetail(HttpServletRequest request,
			HttpServletResponse response) {
		return "/manager/AllOrder";
	}

	/**
	 * Ajax请求,所有订单详情页
	 * */
	@RequestMapping(value = "/getAllOrderDetail", method = RequestMethod.GET)
	public @ResponseBody
	List<Map<String, Object>> allOrderDetail(
			@RequestParam(required = false) String pageSize,
			@RequestParam(required = false) String start_page,
			@RequestParam(required = false) String order_state,
			@RequestParam(required = false) String print_state,
			@RequestParam(required = false) String limit,
			@RequestParam(required = false) String offset,
			HttpServletRequest request, HttpServletResponse response) {
		// List<Map<String, Object>> orders =
		// managerService.queryAllOrderDetail("-1", null,state);
		// request.setAttribute("maxPage", orders.size());
		// request.setAttribute("page", PageTool.getStartAndEndLimit(start_page,
		// limit));
		return managerService.queryAllOrderDetail(start_page, limit,
				order_state, print_state);
	}

	/**
	 * 所有未完成订单详情页,入口
	 * */
	@SinglePage
	@PublicPage
	@RequestMapping(value = "/getUnfinishedOrder")
	public String getUnfinishedOrder1(HttpServletRequest request,
			HttpServletResponse response) {
		return "/manager/unfinishedOrder";
	}

	/**
	 * 已完成订单详情页,入口
	 * */
	@SinglePage
	@PublicPage
	@RequestMapping(value = "/getFinishedOrder")
	public String getFinishedOrder1(HttpServletRequest request,
			HttpServletResponse response) {
		return "/manager/finishedOrder";
	}

	/**
	 * 超过三天订单详情页,入口
	 * */
	@SinglePage
	@PublicPage
	@RequestMapping(value = "/getTimeoutOrder")
	public String getTimeoutOrder1(HttpServletRequest request,
			HttpServletResponse response) {
		return "/manager/timeoutOrder";
	}

	/**
	 * Ajax请求获取同一订单下相关打印文件信息
	 * 
	 * @param id
	 *            : 订单id
	 * */
	@RequestMapping(value = "/getAboveOrderAllFilesPrintInfo", method = RequestMethod.POST)
	public @ResponseBody
	List<Map<String, Object>> getAboveOrderAllFilesPrintInfo(

	@RequestParam(required = false) Object state, @RequestParam Integer id,
			HttpServletRequest request,

			HttpServletResponse response) {
		return ordersService.queryFilesInfoByOrderlist_id(id);
	}

	/**
	 * 下载文件
	 * 
	 * @param filename
	 *            : 文件名
	 * */
	@Auth("1")
	@RequestMapping("download")
	public ResponseEntity<byte[]> download(@RequestParam String filename)
			throws IOException {
		// String
		// path="D:\\workspace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\springMVC\\WEB-INF\\upload\\图片10（定价后）.xlsx";
		File file = new File(filename);
		HttpHeaders headers = new HttpHeaders();
		if (!file.exists()) {
			headers.setContentDispositionFormData("attachment", "error.txt");
			return new ResponseEntity<byte[]>("文件不存在,发送错误.".getBytes(),
					headers, HttpStatus.OK);
		} else {
			String fileName = new String(filename.getBytes("UTF-8"),
					"iso-8859-1");// 为了解决中文名称乱码问题
			headers.setContentDispositionFormData("attachment", fileName);
			headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
			return new ResponseEntity<byte[]>(
					FileUtils.readFileToByteArray(file), headers,
					HttpStatus.CREATED);
		}
	}

	/**
	 * 查询用户,获取用户列表入口
	 * */
	@Auth("1/2/3")
	@SinglePage
	@RequestMapping("userlist_view")
	public String userlist_view(HttpServletRequest request) {
		return "manager/query_user";
	}

	/**
	 * ajax 获取用户列表
	 * 
	 * @param page
	 *            : 取得当前页数,注意这是jqgrid自身的参数
	 * @param rows
	 *            : 取得每页显示行数，,注意这是jqgrid自身的参数
	 * */
	@Auth("1/2")
	@ResponseBody
	@RequestMapping("query_userlist")
	public List<Map<String, Object>> query_userlist(
			@RequestParam(required = false) String page,
			@RequestParam(required = false) String rows,
			HttpServletRequest request) {

		return managerService.query_userlist(page, rows);
	}

	/**
	 * 删除用户
	 * 
	 * */
	@Auth("1/2")
	@ResponseBody
	@RequestMapping("del_user")
	public boolean del_user(@RequestParam(required = false) String id,
			HttpServletRequest request) {
		boolean flag = false;
		System.out.println(id);
		return flag;
	}

	/**
	 * 文库审核 入口
	 * */
	@Auth("1/2/3")
	@SinglePage
	@RequestMapping("bunko_check")
	public String bunko_check(HttpServletRequest request) {
		return "manager/bunko_check";
	}

	/**
	 * ajax 获取文库列表
	 * */
	@Auth("1/2/3")
	@ResponseBody
	@RequestMapping("bunkolist")
	public List<Map<String, Object>> get_bunkolist(
			@RequestParam(required = false) String page,
			@RequestParam(required = false) String rows,
			@RequestParam(required = false) String isAuditing,
			HttpServletRequest request) {
		return managerService.query_bunkolist(page, rows, isAuditing);
	}

	/**
	 * 文库文件审核
	 * */
	@Auth("1/2")
	@ResponseBody
	@RequestMapping("edit_bunko_fileinfo")
	public boolean bunko_check_(@RequestParam String fileunique,
			@RequestParam String isAuditing1) {
		boolean flag = false;
		if (managerService.update_bunko_file(fileunique, isAuditing1) > 0) {
			flag = true;
		}
		return flag;
	}

	/**
	 * 确认打印文件
	 * 
	 * @param id
	 *            : 订单id
	 * */
	@ResponseBody
	@RequestMapping("confirm_print")
	public Map<String, Object> confirm_print(@RequestParam String printstate,
			@RequestParam String id, HttpServletRequest request) {
		Map<String, Object> data = new HashMap<String, Object>();
		if (managerService.update_print_stateByOrderlistID(id, printstate) > 0){
			data.put("flag", true);
		}else{
			data.put("flag", false);
		}
			
		return data;
	}

}
